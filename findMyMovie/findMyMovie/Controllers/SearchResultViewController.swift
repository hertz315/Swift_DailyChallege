//
//  SearchResultViewController.swift
//  findMyMovie
//
//  Created by Hertz on 8/29/22.
//

import UIKit

class SearchResultViewController: UIViewController {
    
    // üçè Ïª¨Î†âÏÖòÎ∑∞ Ïó∞Í≤∞ (ÌÖåÏù¥Î∏îÎ∑∞ÏôÄ Ïú†ÏÇ¨)
    @IBOutlet weak var collectionView: UICollectionView!
    
    // üçè Ïª¨Î†âÏÖòÎ∑∞Ïùò Î™®Îì† Î†àÏù¥ÏïÑÏõÉÏùÑ Îã¥ÎãπÌïòÎäî Í∞ùÏ≤¥
    let flowLayout = UICollectionViewFlowLayout()
    
    // üçè ÎÑ§Ìä∏ÏõåÌÅ¨ Îß§ÎãàÏ†Ä (Ïã±Í∏ÄÌÜ§)
    let networkManager = NetworkManager.shared
    
    // üçè Îç∞Ïù¥ÌÑ∞Î•º Îã§Î£®Í∏∞ ÏúÑÌïú MovieÌÉÄÏûÖ Î∞∞Ïó¥
    var movieList: [Movie] = []
    
    
    
    var searchQueryValue: String? {
        didSet {
            setupDatas()
        }
    }
    
    // MARK: - viewDidLoad
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCollectionView()
        
        // üçé NibÌååÏùºÏùÑ ÏÇ¨Ïö©ÌïúÎã§Î©¥ Îì±Î°ùÏùò Í≥ºÏ†ïÏù¥ ÌïÑÏöî
        // ÏéåÏùÑ Îì±Î°ùÌï¥Ïïº ÎîîÌÅê Í∞ÄÎä•ÌïòÎã§
        collectionView.register(MovieCollectionViewCell.self, forCellWithReuseIdentifier: Cell.movieCollectionViewCellIdentifier)

    }

    // MARK: - setupCollectionView
    func setupCollectionView() {
        
        collectionView.dataSource = self
        
        // üçè Ïª¨Î†âÏÖòÎ∑∞Ïùò Î∞±Í∑∏ÎùºÏö¥Îìú Ïª¨Îü¨
        
        // üçè Ïä§ÌÅ¨Î°§ Î∞©Ìñ•
        flowLayout.scrollDirection = .vertical
        
        // üçè ÏïÑÏù¥ÌÖú Í∞ÄÎ°ú ÏÇ¨Ïù¥Ï¶à = Ïä§ÌÅ¨Î¶∞ ÏÇ¨Ïù¥Ï¶à - (Ïéå ÏÇ¨Ïù¥ Í≥µÍ∞Ñ * (Ïª¨Îüº Ïàò - 1)) / Ïª¨Îüº Ïàò
        let collectionCellWidth = (UIScreen.main.bounds.width - CVCell.spacingWidth * (CVCell.cellColumns - 1)) / CVCell.cellColumns
        
        // üçè ÏïÑÏù¥ÌÖú ÏÇ¨Ïù¥Ï¶à
        flowLayout.itemSize = CGSize(width: collectionCellWidth, height: collectionCellWidth)
        
        // üçè ÏïÑÏù¥ÌÖú ÏÇ¨Ïù¥ Í∞ÑÍ≤© ÏÑ§Ï†ï
        flowLayout.minimumInteritemSpacing = CVCell.spacingWidth
        
        // üçè ÏïÑÏù¥ÌÖú ÏúÑÏïÑÎûò ÏÇ¨Ïù¥ Í∞ÑÍ≤© ÏÑ§Ï†ï
        flowLayout.minimumLineSpacing = CVCell.spacingWidth
        
        // üçè (Ï§ëÏöî) Ïª¨Î†âÏÖòÎ∑∞Ïùò ÏÜçÏÑ±Ïóê Ìï†Îãπ ‚≠êÔ∏è
        collectionView.collectionViewLayout = flowLayout
        
    }
    
    // MARK: - setupDatas
    func setupDatas() {
        
        // üçè ÏòµÏÖîÎÑê Î∞îÏù∏Îî©
        guard let queryValue = searchQueryValue else { return }
        print("ÎÑ§Ìä∏ÏõåÌÇπ ÏãúÏûë Îã®Ïñ¥ \(queryValue)")
        
        // üçè (ÎÑ§Ìä∏ÏõåÌÇπ ÏãúÏûëÏ†ÑÏóê) Îã§Ïãú ÎπàÎ∞∞Ïó¥Î°ú ÎßåÎì§Í∏∞
        self.movieList = []
        
        // üçè ÎÑ§Ìä∏ÏõåÌÇπ ÏãúÏûë (Ï∞æÍ≥†ÏûêÌïòÎäî Îã®Ïñ¥Î•º Í∞ÄÏßÄÍ≥†)
        networkManager.fetchMovie(queryValue: queryValue) { result in
            switch result {
            case .success(let movieDatas):
                // üçè Í≤∞Í≥ºÎ•º Î∞∞Ïó¥Ïóê Îã¥Í≥†
                self.movieList = movieDatas
                // üçè Ïª¨Î†âÏÖòÎ∑∞Î•º Î¶¨Î°úÎìú (Î©îÏù∏Ïì∞Î†àÎìúÏóêÏÑú) ‚≠êÔ∏è
                DispatchQueue.main.async {
                    self.collectionView.reloadData()
                }
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
    }
}

// MARK: - UICollectionViewDataSource
extension SearchResultViewController: UICollectionViewDataSource {
    
    // üçè
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return movieList.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        // üçè
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: Cell.movieCollectionViewCellIdentifier, for: indexPath) as! MovieCollectionViewCell
        
        
        cell.image = movieList[indexPath.item].image
        
        return cell
    }
    
}
